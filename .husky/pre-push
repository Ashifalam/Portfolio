echo "🔍 Running pre-push quality checks..."

# Run ESLint with error count limit
echo "📋 Running ESLint..."
ESLINT_OUTPUT=$(npm run lint 2>&1)
ESLINT_EXIT_CODE=$?

if [ $ESLINT_EXIT_CODE -ne 0 ]; then
  # Count the number of errors
  ERROR_COUNT=$(echo "$ESLINT_OUTPUT" | grep -o "✖ [0-9]* problems" | grep -o "[0-9]*" | head -1)
  MAX_ALLOWED_ERRORS=28
  
  if [ -z "$ERROR_COUNT" ]; then
    ERROR_COUNT=0
  fi
  
  echo "📊 Found $ERROR_COUNT ESLint errors (max allowed: $MAX_ALLOWED_ERRORS)"
  
  if [ "$ERROR_COUNT" -gt "$MAX_ALLOWED_ERRORS" ]; then
    echo "❌ ESLint error count ($ERROR_COUNT) exceeds maximum allowed ($MAX_ALLOWED_ERRORS)."
    echo "🔧 Please fix some errors before pushing. Run 'npm run lint:fix' to auto-fix."
    echo "📝 Current errors:"
    echo "$ESLINT_OUTPUT"
    exit 1
  else
    echo "✅ ESLint error count is within acceptable limit."
    echo "📝 Note: Please work on reducing these errors in future commits."
  fi
else
  echo "✅ No ESLint errors found!"
fi

# Run Prettier check
echo "🎨 Checking code formatting with Prettier..."
npm run format:check
if [ $? -ne 0 ]; then
  echo "❌ Code formatting issues found. Run 'npm run format' to fix them."
  exit 1
fi

# Run tests
echo "🧪 Running tests..."
npm run test:ci
if [ $? -ne 0 ]; then
  echo "❌ Tests failed. Please fix the failing tests before pushing."
  exit 1
fi

# Build check
echo "🏗️ Running build check..."
npm run build
if [ $? -ne 0 ]; then
  echo "❌ Build failed. Please fix the build issues before pushing."
  exit 1
fi

echo "✅ All pre-push checks passed! 🚀"
